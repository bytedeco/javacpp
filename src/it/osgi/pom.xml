<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  
  <groupId>org.bytedeco</groupId>
  <artifactId>javacpp-tests-osgi</artifactId>
  <version>@project.version@</version>
  
  <name>JavaCPP OSGi Tests</name>
  <description>Integration Tests for JavaCPP running in OSGi</description>
  
  <properties>
    <bnd.version>5.3.0</bnd.version>
    <lib.path>${os.name}-${os.arch}/${lib.name}</lib.path>
  </properties>
  
  <!-- Copied and adapted from the javacpp-presets parent pom. Unfortunately 
       inheriting these isn't appropriate because it would pull in other 
       profiles which attempt to build sub-projects which don't exist.
       Also, importing as a parent would introduce a dependency cycle between
       javacpp and the javacpp-presets  -->
  <profiles>
    <profile>
      <id>linux</id>
      <activation>
        <os><name>linux</name></os>
      </activation>
      <properties>
        <os.kernel>linux</os.kernel>
        <os.name>linux</os.name>
        <os.bundle>linux</os.bundle>
        <lib.name>libjniCalc.so</lib.name>
      </properties>
    </profile>
    <profile>
      <id>macosx</id>
      <activation>
        <os><name>mac os x</name></os>
      </activation>
      <properties>
        <os.kernel>darwin</os.kernel>
        <os.name>macosx</os.name>
        <os.bundle>macosx</os.bundle>
        <lib.name>libjniCalc.dylib</lib.name>
      </properties>
    </profile>
    <profile>
      <id>windows</id>
      <activation>
        <os><family>windows</family></os>
      </activation>
      <properties>
        <os.kernel>windows</os.kernel>
        <os.name>windows</os.name>
        <os.bundle>win32</os.bundle>
        <lib.name>jniCalc.dll</lib.name>
      </properties>
    </profile>
    <profile>
      <id>arm</id>
      <activation>
        <os><arch>arm</arch></os>
      </activation>
      <properties>
        <os.arch>armhf</os.arch>
      </properties>
    </profile>
    <profile>
      <id>aarch64</id>
      <activation>
        <os><arch>aarch64</arch></os>
      </activation>
      <properties>
        <os.arch>arm64</os.arch>
      </properties>
    </profile>
    <profile>
      <id>armv8</id>
      <activation>
        <os><arch>armv8</arch></os>
      </activation>
      <properties>
        <os.arch>arm64</os.arch>
      </properties>
    </profile>
    <profile>
      <id>i386</id>
      <activation>
        <os><arch>i386</arch></os>
      </activation>
      <properties>
        <os.arch>x86</os.arch>
      </properties>
    </profile>
    <profile>
      <id>i486</id>
      <activation>
        <os><arch>i486</arch></os>
      </activation>
      <properties>
        <os.arch>x86</os.arch>
      </properties>
    </profile>
    <profile>
      <id>i586</id>
      <activation>
        <os><arch>i586</arch></os>
      </activation>
      <properties>
        <os.arch>x86</os.arch>
      </properties>
    </profile>
    <profile>
      <id>i686</id>
      <activation>
        <os><arch>i686</arch></os>
      </activation>
      <properties>
        <os.arch>x86</os.arch>
      </properties>
    </profile>
    <profile>
      <id>amd64</id>
      <activation>
        <os><arch>amd64</arch></os>
      </activation>
      <properties>
        <os.arch>x86_64</os.arch>
      </properties>
    </profile>
    <profile>
      <id>x86-64</id>
      <activation>
        <os><arch>x86-64</arch></os>
      </activation>
      <properties>
        <os.arch>x86_64</os.arch>
      </properties>
    </profile>
  </profiles>
  
  <dependencies>
    <dependency>
      <groupId>${project.groupId}</groupId>
      <artifactId>javacpp</artifactId>
      <version>${project.version}</version>
    </dependency>
    <dependency>
      <groupId>${project.groupId}</groupId>
      <artifactId>javacpp</artifactId>
      <version>${project.version}</version>
      <classifier>${os.name}-${os.arch}</classifier>
    </dependency>
    <dependency>
      <groupId>org.apache.servicemix.bundles</groupId>
      <artifactId>org.apache.servicemix.bundles.junit</artifactId>
      <version>4.13_1</version>
    </dependency>
    <dependency>
      <groupId>org.apache.felix</groupId>
      <artifactId>org.apache.felix.framework</artifactId>
      <version>6.0.2</version>
      <scope>runtime</scope>
    </dependency>
    <dependency>
      <groupId>org.slf4j</groupId>
      <artifactId>slf4j-simple</artifactId>
      <version>1.7.25</version>
      <scope>runtime</scope>
    </dependency>
  </dependencies>
  
  <build>
    <plugins>
      <plugin>
        <artifactId>maven-deploy-plugin</artifactId>
        <configuration>
          <skip>true</skip>
        </configuration>
      </plugin>
      <plugin>
        <artifactId>maven-install-plugin</artifactId>
        <configuration>
          <skip>true</skip>
        </configuration>
      </plugin>
      <plugin>
        <groupId>${project.groupId}</groupId>
        <artifactId>javacpp</artifactId>
        <version>${project.version}</version>
        <executions>
          <execution>
            <id>javacpp.parser</id>
            <phase>generate-sources</phase>
            <goals>
              <goal>build</goal>
            </goals>
            <configuration>
              <outputDirectory>${project.build.directory}/generated-sources/javacpp</outputDirectory>
              <classOrPackageName>org.bytedeco.javacpp.test.osgi.*</classOrPackageName>
            </configuration>
          </execution>
          <execution>
            <id>javacpp.compiler</id>
            <phase>process-classes</phase>
            <goals>
              <goal>build</goal>
            </goals>
            <configuration>
              <classOrPackageName>org.bytedeco.javacpp.test.osgi.*</classOrPackageName>
              <includePaths>
                <includePath>${project.basedir}/src/main/c</includePath>
              </includePaths>
              <copyLibs>true</copyLibs>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <artifactId>maven-jar-plugin</artifactId>
        <configuration>
          <archive>
            <manifestFile>${project.build.outputDirectory}/META-INF/MANIFEST.MF</manifestFile>
          </archive>
        </configuration>
      </plugin>
      <plugin>
        <groupId>biz.aQute.bnd</groupId>
        <artifactId>bnd-maven-plugin</artifactId>
        <version>${bnd.version}</version>
        <executions>
          <execution>
            <phase>process-classes</phase>
            <goals>
              <goal>bnd-process</goal>
            </goals>
          </execution>
        </executions>
        <configuration>
          <bnd><![CDATA[
Test-Cases: ${classes;NAMED;*Test}

Bundle-NativeCode: \
 org/bytedeco/javacpp/test/osgi/${lib.path};\
 osname=${os.bundle}
 
          ]]></bnd>
        </configuration>
      </plugin>
      <plugin>
        <groupId>biz.aQute.bnd</groupId>
        <artifactId>bnd-testing-maven-plugin</artifactId>
        <version>${bnd.version}</version>
        <executions>
          <execution>
            <goals>
              <goal>testing</goal>
            </goals>
          </execution>
        </executions>
        <configuration>
          <bndruns>
            <bndrun>test.bndrun</bndrun>
          </bndruns>
        </configuration>
      </plugin>
    </plugins>
  </build>
</project>
